{"ast":null,"code":"var _jsxFileName = \"/home/shosh/Desktop/ToDoList_App_MERN/todo/src/components/TodoItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = 'http://localhost:4001/todo';\nfunction TodoItem(props) {\n  _s();\n  const {\n    name,\n    id,\n    completed,\n    setItems\n  } = props;\n  const [isEditing, setIsEditing] = useState(false);\n  const [editValue, setEditValue] = useState(name);\n  const deleteTodo = async id => {\n    try {\n      const response = await fetch(`${API_BASE}/delete/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete a task');\n      }\n      const data = await response.json();\n      setItems(items => items.filter(item => item._id !== data._id));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const updateTodo = async () => {\n    const trimmedEditValue = editValue.trim();\n    if (trimmedEditValue === '') {\n      alert('Task name cannot be empty');\n      return;\n    }\n\n    // Ensure props.items is available before using it\n    if (props.items && props.items.some(item => item.name.toLowerCase() === trimmedEditValue.toLowerCase() && item._id !== id)) {\n      alert('Task with this name already exists');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE}/update/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: trimmedEditValue\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n      const updatedTodo = await response.json();\n      setItems(items => items.map(item => item._id === id ? {\n        ...item,\n        name: updatedTodo.name\n      } : item));\n      setIsEditing(false);\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `todo-item ${completed ? 'check-complete' : ''}`,\n    children: [isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: editValue,\n      onChange: e => setEditValue(e.target.value),\n      onKeyDown: e => {\n        if (e.key === 'Enter') updateTodo();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text\",\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"edit-btn\",\n      onClick: () => setIsEditing(!isEditing),\n      children: \"\\u270F\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"delete-btn\",\n      onClick: () => deleteTodo(id),\n      children: \"\\uD83D\\uDDD1\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"save-btn\",\n      onClick: updateTodo,\n      children: \"\\uD83D\\uDCBE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoItem, \"VPFpWf59Vu+8i6kkQvO3m/AvZDI=\");\n_c = TodoItem;\nexport default TodoItem;\nvar _c;\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","API_BASE","TodoItem","props","_s","name","id","completed","setItems","isEditing","setIsEditing","editValue","setEditValue","deleteTodo","response","fetch","method","ok","Error","data","json","items","filter","item","_id","error","console","updateTodo","trimmedEditValue","trim","alert","some","toLowerCase","headers","body","JSON","stringify","updatedTodo","map","className","children","type","value","onChange","e","target","onKeyDown","key","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/shosh/Desktop/ToDoList_App_MERN/todo/src/components/TodoItem.js"],"sourcesContent":["import React, { useState } from 'react';\nconst API_BASE = 'http://localhost:4001/todo';\n\nfunction TodoItem(props) {\n  const { name, id, completed, setItems } = props;\n  const [isEditing, setIsEditing] = useState(false);\n  const [editValue, setEditValue] = useState(name);\n\n  const deleteTodo = async (id) => {\n    try {\n      const response = await fetch(`${API_BASE}/delete/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete a task');\n      }\n      const data = await response.json();\n      setItems((items) => items.filter((item) => item._id !== data._id));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const updateTodo = async () => {\n    const trimmedEditValue = editValue.trim();\n\n    if (trimmedEditValue === '') {\n      alert('Task name cannot be empty');\n      return;\n    }\n\n    // Ensure props.items is available before using it\n    if (\n      props.items &&\n      props.items.some((item) => item.name.toLowerCase() === trimmedEditValue.toLowerCase() && item._id !== id)\n    ) {\n      alert('Task with this name already exists');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE}/update/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name: trimmedEditValue }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n      const updatedTodo = await response.json();\n      setItems((items) => items.map((item) => (item._id === id ? { ...item, name: updatedTodo.name } : item)));\n      setIsEditing(false);\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n\n\n  return (\n    <div className={`todo-item ${completed ? 'check-complete' : ''}`} key={id}>\n      {isEditing ? (\n        <input\n          type=\"text\"\n          value={editValue}\n          onChange={(e) => setEditValue(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') updateTodo();\n          }}\n        />\n      ) : (\n        <div className=\"text\">{name}</div>\n      )}\n\n      <button className=\"edit-btn\" onClick={() => setIsEditing(!isEditing)}>\n        ‚úèÔ∏è\n      </button>\n      <button className=\"delete-btn\" onClick={() => deleteTodo(id)}>\n        üóëÔ∏è\n      </button>\n\n      {isEditing && (\n        <button className=\"save-btn\" onClick={updateTodo}>\n          üíæ\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default TodoItem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}